package br.com.calife.ControleFinanceiro.core.documentation;

import br.calife.cve.config.Constants;
import br.calife.cve.core.http.response.ResponseErrorDTO;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;

public interface CrudDocumentation<T, ID> extends Documentation<T> {

	// CREATE
    @Operation(summary = Constants.DOCUMENTATION.MESSAGES.SUMMARY_CREATE, responses = {
        @ApiResponse(responseCode = "201", description = Constants.DOCUMENTATION.MESSAGES.RESPONSE_201, content = @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = GenericResponseDTO.class))),
        @ApiResponse(responseCode = "404", description = Constants.DOCUMENTATION.MESSAGES.ERROR_404, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "403", description = Constants.DOCUMENTATION.MESSAGES.ERROR_403, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "409", description = Constants.DOCUMENTATION.MESSAGES.ERROR_409, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "422", description = Constants.DOCUMENTATION.MESSAGES.ERROR_422, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),

    })
    ResponseEntity<T> create(T obj);

    // REQUEST
    @Operation(summary = Constants.DOCUMENTATION.MESSAGES.SUMMARY_FIND_BY_ID, security = @SecurityRequirement(name = "security"), responses = {
        @ApiResponse(responseCode = "200", description = Constants.DOCUMENTATION.MESSAGES.RESPONSE_200_FIND_BY_ID),
        @ApiResponse(responseCode = "404", description = Constants.DOCUMENTATION.MESSAGES.ERROR_404, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "403", description = Constants.DOCUMENTATION.MESSAGES.ERROR_403, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))) })
    ResponseEntity<T> findById(ID id);

    // UPDATE
    @Operation(summary = Constants.DOCUMENTATION.MESSAGES.SUMMARY_UPDATE, security = @SecurityRequirement(name = "security"), responses = {
        @ApiResponse(responseCode = "200", description = Constants.DOCUMENTATION.MESSAGES.RESPONSE_200_UPDATE, content = @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = GenericResponseDTO.class))),
        @ApiResponse(responseCode = "404", description = Constants.DOCUMENTATION.MESSAGES.ERROR_404, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "403", description = Constants.DOCUMENTATION.MESSAGES.ERROR_403, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "409", description = Constants.DOCUMENTATION.MESSAGES.ERROR_409, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "422", description = Constants.DOCUMENTATION.MESSAGES.ERROR_422, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
    })
    ResponseEntity<T> update(T obj);

    // DELETE
    @Operation(summary = Constants.DOCUMENTATION.MESSAGES.SUMMARY_DELETE, security = @SecurityRequirement(name = "security"), responses = {
        @ApiResponse(responseCode = "204", description = Constants.DOCUMENTATION.MESSAGES.RESPONSE_204, content = @Content(mediaType = "application/json;charset=UTF-8", schema = @Schema(implementation = GenericResponseDTO.class))),
        @ApiResponse(responseCode = "404", description = Constants.DOCUMENTATION.MESSAGES.ERROR_404, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class))),
        @ApiResponse(responseCode = "403", description = Constants.DOCUMENTATION.MESSAGES.ERROR_403, content = @Content(mediaType = " application/json;charset=UTF-8", schema = @Schema(implementation = ResponseErrorDTO.class)))})
    void delete(ID id);

}
